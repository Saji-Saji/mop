import{ac as t,ad as e,m as a,a as s,b as l,r as n,I as o,T as i,f as d,g as p}from"./preset_utils-C08y0zZJ.chunk.js";import{R as r}from"./suggest_reforges_action-B1NagpDI.chunk.js";import{bl as c,a5 as S,bm as u,S as m,a as I,b as h,as as f,o as g,c as P,G as y,bh as w,bn as v,bj as b,bk as A,f as O,C as k,i as H,D as R,R as D,g as T,m as C,I as E,h as N,U as M,j as W,F as x,E as F}from"./detailed_results-l_PUj7md.chunk.js";import{T as L,S as j,a as G}from"./inputs-fmdtjKfW.chunk.js";const B=t({fieldName:"imbueOh",values:[{value:c.NoImbue,tooltip:"No Off Hand Enchant"},{actionId:S.fromSpellId(8232),value:c.WindfuryWeapon},{actionId:S.fromSpellId(8024),value:c.FlametongueWeapon},{actionId:S.fromSpellId(8033),value:c.FrostbrandWeapon}]}),U=e({fieldName:"syncType",label:"Sync/Stagger Setting",labelTooltip:"Choose your sync or stagger option Perfect\n\t\t<ul>\n\t\t\t<li><div>Auto: Will auto pick sync options based on your weapons attack speeds</div></li>\n\t\t\t<li><div>None: No Sync or Staggering, used for mismatched weapon speeds</div></li>\n\t\t\t<li><div>Perfect Sync: Makes your weapons always attack at the same time, for match weapon speeds</div></li>\n\t\t\t<li><div>Delayed Offhand: Adds a slight delay to the offhand attacks while staying within the 0.5s flurry ICD window</div></li>\n\t\t</ul>",values:[{name:"Automatic",value:u.Auto},{name:"None",value:u.NoSync},{name:"Perfect Sync",value:u.SyncMainhandOffhandSwings},{name:"Delayed Offhand",value:u.DelayOffhandSwings}]}),_={type:"TypeAPL",prepullActions:[{action:{castSpell:{spellId:{spellId:51533}}},doAtValue:{const:{val:"-1.6s"}}}],priorityList:[{action:{autocastOtherCooldowns:{}}},{action:{condition:{and:{vals:[{not:{val:{dotIsActive:{spellId:{spellId:3599}}}}},{not:{val:{auraIsActive:{auraId:{spellId:2894}}}}}]}},castSpell:{spellId:{spellId:3599}}}},{action:{castSpell:{spellId:{spellId:117014}}}},{action:{castSpell:{spellId:{spellId:115356}}}},{action:{castSpell:{spellId:{spellId:17364}}}},{action:{castSpell:{spellId:{spellId:60103}}}},{action:{condition:{and:{vals:[{cmp:{op:"OpLt",lhs:{math:{op:"OpAdd",lhs:{inputDelay:{}},rhs:{spellCastTime:{spellId:{spellId:403}}}}},rhs:{autoTimeToNext:{}}}},{cmp:{op:"OpGe",lhs:{auraNumStacks:{auraId:{spellId:51530}}},rhs:{const:{val:"3"}}}}]}},castSpell:{spellId:{spellId:403}}}},{action:{condition:{cmp:{op:"OpLe",lhs:{currentTime:{}},rhs:{const:{val:"7"}}}},castSpell:{spellId:{spellId:2062}}}},{action:{condition:{and:{vals:[{not:{val:{dotIsActive:{spellId:{spellId:8050,tag:1}}}}},{auraIsActive:{auraId:{spellId:73683}}}]}},castSpell:{spellId:{spellId:8050}}}},{action:{castSpell:{spellId:{spellId:73680}}}},{action:{condition:{and:{vals:[{cmp:{op:"OpLt",lhs:{math:{op:"OpAdd",lhs:{inputDelay:{}},rhs:{spellCastTime:{spellId:{spellId:421}}}}},rhs:{autoTimeToNext:{}}}},{cmp:{op:"OpGe",lhs:{auraNumStacks:{auraId:{spellId:51530}}},rhs:{const:{val:"1"}}}}]}},castSpell:{spellId:{spellId:421}}}},{action:{condition:{and:{vals:[{cmp:{op:"OpLe",lhs:{dotRemainingTime:{spellId:{spellId:8050}}},rhs:{const:{val:"9s"}}}},{auraIsActive:{auraId:{spellId:73683}}}]}},castSpell:{spellId:{spellId:8050}}}},{action:{castSpell:{spellId:{spellId:8042}}}},{action:{castSpell:{spellId:{spellId:51533}}}},{action:{condition:{cmp:{op:"OpLt",lhs:{dotRemainingTime:{spellId:{spellId:3599}}},rhs:{const:{val:"15s"}}}},castSpell:{spellId:{spellId:3599}}}}]},V={items:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]},q=a("Pre-raid",{items:[{id:81105,gems:[0,0]},{id:81564},{id:81698,gems:[0]},{id:81282},{id:81285,gems:[0]},{id:81185,gems:[0]},{id:81277,gems:[0]},{id:81085,gems:[0]},{id:81077,gems:[0]},{id:81112,gems:[0]},{id:81128},{id:81191},{id:79328},{id:81125},{id:81062},{id:81089}]}),z=a("P1 - Orc",V),J=s("Default",_),K=l("Default",m.fromMap({[I.StatIntellect]:.07,[I.StatAgility]:2.47,[I.StatSpellPower]:0,[I.StatHitRating]:1.49,[I.StatCritRating]:.84,[I.StatHasteRating]:.66,[I.StatAttackPower]:1,[I.StatExpertiseRating]:1.3,[I.StatMasteryRating]:1.21},{[h.PseudoStatMainHandDps]:3.05,[h.PseudoStatOffHandDps]:2.56,[h.PseudoStatSpellHitPercent]:.89*g,[h.PseudoStatPhysicalHitPercent]:.6*f})),Q={name:"Standard",data:P.create({talentsString:"313232",glyphs:y.create({major1:w.GlyphOfLightningShield,major2:w.GlyphOfHealingStreamTotem,major3:w.GlyphOfFireNova})})},X=v.create({classOptions:{shield:A.LightningShield,imbueMh:c.WindfuryWeapon,feleAutocast:b.create({autocastFireblast:!0,autocastFirenova:!0,autocastImmolate:!0,autocastEmpower:!1})},imbueOh:c.FlametongueWeapon,syncType:u.Auto}),Y={distanceFromTarget:5,profession1:O.Engineering,profession2:O.Tailoring},Z=k.create({flaskId:76084,foodId:74648,potId:76089,prepotId:76089}),$=H.create({}),tt=R.create({}),et=n(T.SpecEnhancementShaman,{cssClass:"enhancement-shaman-sim-ui",cssScheme:W.getCssClass(W.Shaman),knownIssues:[],overwriteDisplayStats:t=>{const e=t.getCurrentStats(),a=(t,e)=>(new m).withStat(I.StatSpellPower,.65*m.fromProto(t).subtract(m.fromProto(e)).getStat(I.StatAttackPower));return{base:a(e.baseStats),gear:a(e.gearStats,e.baseStats),talents:a(e.talentsStats,e.gearStats),buffs:a(e.buffsStats,e.talentsStats),consumes:a(e.consumesStats,e.buffsStats),final:(new m).withStat(I.StatSpellPower,.65*m.fromProto(e.finalStats).getStat(I.StatAttackPower)),stats:[I.StatSpellPower]}},epStats:[I.StatAgility,I.StatIntellect,I.StatAttackPower,I.StatHitRating,I.StatCritRating,I.StatHasteRating,I.StatExpertiseRating,I.StatSpellPower,I.StatMasteryRating],epPseudoStats:[h.PseudoStatMainHandDps,h.PseudoStatOffHandDps,h.PseudoStatPhysicalHitPercent,h.PseudoStatSpellHitPercent],epReferenceStat:I.StatAttackPower,displayStats:M.createDisplayStatArray([I.StatHealth,I.StatStamina,I.StatStrength,I.StatAgility,I.StatIntellect,I.StatAttackPower,I.StatExpertiseRating,I.StatSpellPower,I.StatMasteryRating],[h.PseudoStatPhysicalHitPercent,h.PseudoStatPhysicalCritPercent,h.PseudoStatMeleeHastePercent,h.PseudoStatSpellHitPercent,h.PseudoStatSpellCritPercent,h.PseudoStatSpellHastePercent]),defaults:{gear:z.gear,epWeights:K.epWeights,statCaps:(()=>{const t=(new m).withPseudoStat(h.PseudoStatPhysicalHitPercent,7.5),e=(new m).withPseudoStat(h.PseudoStatSpellHitPercent,15),a=(new m).withStat(I.StatExpertiseRating,30*F);return t.add(e.add(a))})(),other:Y,consumables:Z,talents:Q.data,specOptions:X,raidBuffs:$,partyBuffs:N.create({}),individualBuffs:E.create({}),debuffs:tt},playerIconInputs:[j(),G(),B],includeBuffDebuffInputs:[],excludeBuffDebuffInputs:[],otherInputs:{inputs:[U,o,i,d]},itemSwapSlots:[C.ItemSlotHead,C.ItemSlotShoulder,C.ItemSlotBack,C.ItemSlotChest,C.ItemSlotHands,C.ItemSlotLegs,C.ItemSlotTrinket1,C.ItemSlotTrinket2,C.ItemSlotMainHand,C.ItemSlotOffHand],customSections:[L],encounterPicker:{showExecuteProportion:!1},presets:{epWeights:[K],talents:[Q],rotations:[J],gear:[q,z]},autoRotation:t=>J.rotation.rotation,raidSimPresets:[{spec:T.SpecEnhancementShaman,talents:Q.data,specOptions:X,consumables:Z,defaultFactionRaces:{[x.Alliance]:D.RaceDraenei,[x.Horde]:D.RaceOrc,[x.Unknown]:D.RaceUnknown},defaultGear:{[x.Alliance]:{1:z.gear},[x.Horde]:{1:z.gear},[x.Unknown]:{}},otherDefaults:Y}]});class at extends p{constructor(t,e){super(t,e,et),e.sim.waitForInit().then((()=>{new r(this)}))}}export{at as E};
